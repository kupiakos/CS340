<project xmlns:ivy="antlib:org.apache.ivy.ant" name="DemoServer2" default="server" basedir="."
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="antlib:org.apache.ivy.ant ">

    <!-- PROPERTIES -->
    <!-- ********** -->

    <!-- Directory paths for the java server, javascript, and dest dir for the student copy -->
    <property name="port.arg" value="8081"/>
    <property name="web.arg" value="gameplay"/>
    <property name="options.arg" value="ug"/>

    <!-- Input folders -->
    <property name="java.dir" value="java"/>
    <property name="java.src.dir" value="${java.dir}/src"/>
    <property name="java.lib.dir" value="${java.dir}/lib"/>

    <!-- JavaScript source folder -->
    <property name="javascript.dir" value="gameplay/js"/>

    <!-- Base output folder -->
    <property name="dest.dir" value="docs"/>
    <!-- Javadoc output folder -->
    <property name="javadoc.dir" value="${dest.dir}/java"/>
    <!-- YUIDoc output folder -->
    <property name="yuidoc.dir" value="${dest.dir}/javascript"/>
    <!-- Jar file path/name from here -->
    <property name="demo.dir" value="demo"/>
    <property name="server.jar.file" value="${demo.dir}/server.jar"/>
    <property name="client.jar.file" value="${demo.dir}/catan-client.jar"/>


    <property name="java.dir" location="java"/>
    <property name="java.src" location="${java.dir}/src"/>
    <property name="java.swagger" location="demo/docs"/>
    <property name="java.images" location="${java.dir}/images"/>
    <property name="java.build" location="${java.dir}/build"/>
    <property name="java.dist" location="${java.dir}/dist"/>
    <property name="java.lib" location="${java.dir}/lib"/>

    <!-- Variables used for JUnit testing -->
    <property name="java.test.report" location="${java.dir}/testreport"/>
    <property name="java.test" location="${java.dir}/tests"/>

    <!--<property name="java.test.formatter" location="${java.test}" />-->
    <property name="java.build.test" location="${java.build}/tests"/>

    <!-- command line args -->
    <property name="host" value="localhost"/>
    <property name="port" value="8081"/>


    <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
             classpath="${java.lib}/checkstyle-7.3-all.jar"/>

    <!-- CLASSPATHS -->
    <!-- ********** -->
    <path id="java.lib.classpath">
        <fileset dir="${java.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="classpath.test">
        <fileset dir="${java.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${java.build}"/>
    </path>


    <!-- TARGETS -->
    <!-- ******* -->
    <target name="test" depends="junit"/>

    <target name="server" description="Runs the demo server">
        <java jar="${server.jar.file}" fork="true" dir="${demo.dir}">
            <arg value="${port.arg}"/>
            <arg value="${web.arg}"/>
            <arg value="${options.arg}"/>
            <assertions>
                <enable/>
            </assertions>
        </java>
    </target>

    <target name="client" description="Runs the demo client">
        <java jar="${client.jar.file}" fork="true" dir="${demo.dir}">
            <assertions>
                <enable/>
            </assertions>
        </java>
    </target>

    <target name="make-java-doc" description="Generate the Java docs">
        <echo>Making Java documentation</echo>
        <delete dir="${javadoc.dir}"/>
        <javadoc destdir="${javadoc.dir}" Package="true">
            <classpath refid="java.lib.classpath"/>
            <packageset dir="${java.src.dir}">
                <include name="client/**"/>
                <include name="shared/**"/>
            </packageset>
        </javadoc>
    </target>

    <!--
    <target name="make-js-doc" description="Generate the JavaScript docs">
        <echo> Making JavaScript documentation </echo>
        <exec executable="yuidoc">
            <arg value="-o"/>
            <arg value="${yuidoc.dir}"/>
            <arg value="${javascript.dir}"/>
        </exec>
    </target>
    -->


    <target name="init" description="create build directories">
        <tstamp/>
        <mkdir dir="${java.build}"/>
        <mkdir dir="${java.dist}"/>
        <mkdir dir="${java.build.test}"/>
        <mkdir dir="${java.test.report}/results"/>
        <mkdir dir="${java.test.report}/report"/>


    </target>


    <target name="compile" depends="clean, init" description="compile the source ">
        <javac srcdir="${java.src}" destdir="${java.build}" debug="true" includeantruntime="true">
            <classpath refid="java.lib.classpath"/>
        </javac>
    </target>


    <target name="clean" description="clean build files">
        <delete dir="${java.build}"/>
        <delete dir="${java.dist}"/>
        <delete dir="${java.test.report}"/>
    </target>


    <target name="test-compile" depends="compile" description="compile the test source ">
        <javac srcdir="${java.test}" destdir="${java.build.test}" includeantruntime="false">
            <classpath refid="classpath.test"/>
        </javac>
    </target>

    <target name="package" depends="compile" description="package the jar file">
        <mkdir dir="${java.dist}/lib"/>
        <copy todir="${java.dist}/lib">
            <fileset dir="${java.lib}">
                <include name="**"/>
            </fileset>
        </copy>
        <mkdir dir="${java.dist}/images"/>
        <copy todir="${java.dist}/images">
            <fileset dir="${java.images}">
                <include name="**"/>
            </fileset>
        </copy>
        <mkdir dir="${java.dist}/docs"/>
        <copy todir="${java.dist}/docs">
            <fileset dir="${java.swagger}">
                <include name="**"/>
            </fileset>
        </copy>
        <jar jarfile="${java.dist}/catan-client.jar" basedir="${java.build}">
            <manifest>
                <attribute name="Main-Class" value="client.main.Catan"/>
                <attribute name="Class-Path"
                           value="lib/gson-2.2.4.jar"/>
            </manifest>
        </jar>
        <jar jarfile="${java.dist}/catan-server.jar" basedir="${java.build}">
            <manifest>
                <attribute name="Main-Class" value="server.main.CatanServer"/>
                <attribute name="Class-Path"
                           value="lib/gson-2.2.4.jar"/>
            </manifest>
        </jar>
    </target>

    <!-- compiles our client -->


    <target name="our-client" depends="package" description="compiles, packages, and runs the student client">
        <java jar="${java.dist}/catan-client.jar" dir="${java.dist}" fork="yes">
            <arg value="${host}"/>
            <arg value="${port}"/>

            <sysproperty key="com.sun.management.jmxremote" value=""/>
            <assertions>
                <enable/>
            </assertions>
        </java>
    </target>

    <target name="our-server" depends="package" description="compiles, packages, and runs the student server">
        <java jar="${java.dist}/catan-server.jar" dir="${java.dist}" fork="yes">
            <arg value="${host}"/>
            <arg value="${port}"/>

            <sysproperty key="com.sun.management.jmxremote" value=""/>
            <assertions>
                <enable/>
            </assertions>
        </java>
    </target>

    <target name="make-tester-zip" depends="package" description="makes a zip file for your testing team">
        <zip destfile="./tester.zip" basedir="${java.dist}"/>
    </target>

    <!-- Run the JUnit Tests -->
    <!-- Output is XML, could also be plain-->
    <target name="junit" depends="test-compile, checkstyle">
        <junit printsummary="on" fork="on" haltonfailure="yes" showoutput="yes">
            <!--<junit printsummary="off" fork="on"-->
            <!--failureproperty="test.failed" showoutput="off" dir="out"-->
            <!--outputtoformatters="false" filtertrace="on" >-->

            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${java.build.test}"/>
            </classpath>
            <classpath refid="java.lib.classpath"/>

            <formatter type="brief" usefile="false"/>
            <!--<formatter classname="java.test.formatter" usefile="false" />-->


            <batchtest todir="${java.test.report}">
                <fileset dir="${java.test}">
                    <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>

        </junit>

        <!-- generate report with junitreport -->
        <junitreport todir="${java.test.report}">
            <fileset dir="${java.test.report}/results"/>
            <report todir="${java.test.report}/report"/>
        </junitreport>

        <!-- concat the report through a filter chain to extract what you want -->
        <concat>
            <fileset file="${java.test.report}/overview-summary.html"/>
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern='title="Display all tests"'/>
                </linecontainsregexp>
                <tokenfilter>
                    <replaceregex
                            pattern='&lt;td&gt;&lt;a href="all-tests.html" title="Display all tests"&gt;(\d+)&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="alltests-fails.html" title="Display all failures"&gt;(\d+)&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="alltests-errors.html" title="Display all errors"&gt;(\d+).*$'
                            replace="Run: \1, Failed: \2, Errors: \3"/>
                </tokenfilter>
            </filterchain>
        </concat>

        <fail message="test failed" if="test.failure"/>

    </target>

    <target name="main" depends="compile, test">
        <description>Main target</description>
    </target>


    <!-- ##########################################################################
     ####################### target: checkstyle ###############################
     ########################################################################## -->

    <target name="checkstyle"
            description="Generates a report of code convention violations."
            depends="init-checkstyle">
        <!-- See http://checkstyle.sourceforge.net/anttask.html for full options of using checkstyle with ant-->
        <checkstyle config="checkstyle.xml"
                    failureProperty="checkstyle.failure"
                    failOnViolation="true">
            <formatter type="plain" tofile="java/testreport/checkstyle_report.txt"/>
            <fileset dir="java/src" includes="**/*.java"/>
        </checkstyle>
    </target>

    <target name="init-checkstyle" depends="resolve">
        <path id="checkstyle.lib.path">
            <fileset dir="lib" includes="*.jar"/>
        </path>
        <!-- Sevntu custom checks are retrieved by Ivy into lib folder and will be accessible to checkstyle-->
        <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
                 classpathref="checkstyle.lib.path"/>
    </target>


    <!-- ##########################################################################
         ####################### target: resolve ##################################
         ########################################################################## -->
    <target name="resolve" description="retrieve dependencies with ivy" depends="init-ivy">
        <ivy:settings file="ivysettings.xml"/>
        <ivy:retrieve/>
    </target>


    <!-- ##########################################################################
         ####### Downloading and setup Ivy for managing dependencies ##############
         ##########################################################################-->
    <property name="ivy.install.version" value="2.1.0-rc2"/>
    <!-- You may place ivy.jar into other folder if you want to keep folder lib clean-->
    <property name="ivy.jar.dir" value="lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load ivy here from ivy home, in case the user has not already dropped
                it into ant's lib dir (note that the latter copy will always take precedence).
                We will not fail as long as local lib dir exists (it may be empty) and
                ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>

        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

</project>
 
